From 3693e78e942ba8d0edff921285420cd5d23e2f99 Mon Sep 17 00:00:00 2001
From: James Almer <jamrial@gmail.com>
Date: Mon, 19 Sep 2022 09:03:46 -0300
Subject: [PATCH 3/4] avformat/mpegtsenc: add experimental support for muxing
 AV1 streams

Signed-off-by: James Almer <jamrial@gmail.com>
---
 libavformat/mpegtsenc.c | 61 +++++++++++++++++++++++++++++++++++++++++
 1 file changed, 61 insertions(+)

diff --git a/libavformat/mpegtsenc.c b/libavformat/mpegtsenc.c
index 596ed4bdc759d..cc64712e157ba 100644
--- a/libavformat/mpegtsenc.c
+++ b/libavformat/mpegtsenc.c
@@ -26,15 +26,17 @@
 #include "libavutil/intreadwrite.h"
 #include "libavutil/mathematics.h"
 #include "libavutil/opt.h"
+#include "libavutil/pixdesc.h"
 
 #include "libavcodec/ac3_parser_internal.h"
 #include "libavcodec/bytestream.h"
 #include "libavcodec/defs.h"
 #include "libavcodec/h264.h"
 #include "libavcodec/hevc.h"
 #include "libavcodec/vvc.h"
 #include "libavcodec/startcode.h"

+#include "av1.h"
 #include "avformat.h"
 #include "avio_internal.h"
 #include "internal.h"
@@ -357,6 +359,9 @@ static int get_dvb_stream_type(AVFormatContext *s, AVStream *st)
     int stream_type;
 
     switch (st->codecpar->codec_id) {
+    case AV_CODEC_ID_AV1:
+        stream_type = STREAM_TYPE_PRIVATE_DATA;
+        break;
     case AV_CODEC_ID_MPEG1VIDEO:
     case AV_CODEC_ID_MPEG2VIDEO:
         stream_type = STREAM_TYPE_VIDEO_MPEG2;
@@ -460,6 +465,9 @@ static int get_m2ts_stream_type(AVFormatContext *s, AVStream *st)
     MpegTSWriteStream *ts_st = st->priv_data;
 
     switch (st->codecpar->codec_id) {
+    case AV_CODEC_ID_AV1:
+        stream_type = STREAM_TYPE_PRIVATE_DATA;
+        break;
     case AV_CODEC_ID_MPEG2VIDEO:
         stream_type = STREAM_TYPE_VIDEO_MPEG2;
         break;
@@ -804,6 +812,47 @@ static int mpegts_write_pmt(AVFormatContext *s, MpegTSService *service)
                 put_registration_descriptor(&q, MKTAG('V', 'C', '-', '1'));
             } else if (stream_type == STREAM_TYPE_VIDEO_HEVC && s->strict_std_compliance <= FF_COMPLIANCE_NORMAL) {
                 put_registration_descriptor(&q, MKTAG('H', 'E', 'V', 'C'));
+            } else if (codec_id == AV_CODEC_ID_AV1) {
+                FFIOContext pb;
+                uint8_t buf[4];
+
+                /* 6 bytes registration descriptor, 10 bytes AV1 descriptor */
+                if (q - data > SECTION_LENGTH - 6 - 10) {
+                    err = 1;
+                    break;
+                }
+
+                put_registration_descriptor(&q, MKTAG('A', 'V', '0', '1'));
+
+               /* The descriptor tag */
+               *q++ = 0x5F;
+               *q++ = 8;
+
+               /* private_data_specifier */
+               // FIXME, not defined in spec
+               put16(&q, 0);
+               put16(&q, 0);
+
+               ffio_init_context(&pb, buf, sizeof(buf),
+                                 1, NULL, NULL, NULL, NULL);
+
+               if ((ts_st->extradata_size < sizeof(buf)) ||
+                   ff_isom_write_av1c(&pb.pub, ts_st->extradata, sizeof(buf), 0) < 0) {
+                   // Derive values from st->codecpar if no extradata is present
+                   const AVPixFmtDescriptor *desc = av_pix_fmt_desc_get(st->codecpar->format);
+                   *q++ = 0x81; // marker, version
+                   *q++ = (st->codecpar->profile << 5) | (st->codecpar->level & 0x1F);
+                   *q++ = desc ? ((desc->comp[0].depth > 8)  << 6) | ((desc->comp[0].depth == 12) << 5) |
+                                 ((desc->nb_components == 1) << 4) |  (desc->log2_chroma_w        << 3) |
+                                  (desc->log2_chroma_h       << 2) : 0;
+                   *q++ = 3 << 6; // hdr_wcg_idc;
+                   break;
+               }
+
+               *q++ = buf[0];
+               *q++ = buf[1];
+               *q++ = buf[2];
+               *q++ = buf[3] | (3 << 6); // hdr_wcg_idc;
             } else if (stream_type == STREAM_TYPE_VIDEO_CAVS || stream_type == STREAM_TYPE_VIDEO_AVS2 ||
                        stream_type == STREAM_TYPE_VIDEO_AVS3) {
                 put_registration_descriptor(&q, MKTAG('A', 'V', 'S', 'V'));
@@ -1450,6 +1499,8 @@ static int get_pes_stream_id(AVFormatContext *s, AVStream *st, int stream_id, in
     if (st->codecpar->codec_type == AVMEDIA_TYPE_VIDEO) {
         if (st->codecpar->codec_id == AV_CODEC_ID_DIRAC)
             return STREAM_ID_EXTENDED_STREAM_ID;
+        else if (st->codecpar->codec_id == AV_CODEC_ID_AV1)
+            return STREAM_ID_PRIVATE_STREAM_1;
         else
             return STREAM_ID_VIDEO_STREAM_0;
     } else if (st->codecpar->codec_type == AVMEDIA_TYPE_AUDIO &&
@@ -1994,6 +2045,16 @@ static int mpegts_write_packet_internal(AVFormatContext *s, AVPacket *pkt)
                 buf             = data;
             }
         }
+    } else if (st->codecpar->codec_id == AV_CODEC_ID_AV1) {
+        int off;
+        int ret = ff_av1_filter_obus_buf(buf, &data, &size, &off);
+        if (ret < 0)
+            return ret;
+        if (buf == data) {
+            buf += off;
+            data = NULL;
+        } else
+            buf = data;
     } else if (st->codecpar->codec_id == AV_CODEC_ID_HEVC) {
         const uint8_t *p = buf, *buf_end = p + size;
         uint32_t state = -1;

From 5f74d50cf91cfd057c519310f1f0893a282c04e3 Mon Sep 17 00:00:00 2001
From: James Almer <jamrial@gmail.com>
Date: Mon, 26 Sep 2022 10:26:38 -0300
Subject: [PATCH 4/4] avformat/mpegts: add experimental support for demuxing
 AV1 streams

Signed-off-by: James Almer <jamrial@gmail.com>
---
 libavformat/mpegts.c | 18 ++++++++++++++++++
 1 file changed, 18 insertions(+)

diff --git a/libavformat/mpegts.c b/libavformat/mpegts.c
index d97702fcd7d11..3935acc7b5261 100644
--- a/libavformat/mpegts.c
+++ b/libavformat/mpegts.c
@@ -878,6 +878,7 @@ static const StreamType REGD_types[] = {
     { MKTAG('I', 'D', '3', ' '), AVMEDIA_TYPE_DATA,  AV_CODEC_ID_TIMED_ID3 },
     { MKTAG('V', 'C', '-', '1'), AVMEDIA_TYPE_VIDEO, AV_CODEC_ID_VC1   },
     { MKTAG('O', 'p', 'u', 's'), AVMEDIA_TYPE_AUDIO, AV_CODEC_ID_OPUS  },
+    { MKTAG('A', 'V', '0', '1'), AVMEDIA_TYPE_VIDEO, AV_CODEC_ID_AV1   },
     { 0 },
 };
 
@@ -2039,6 +2040,23 @@ int ff_parse_mpeg2_descriptor(AVFormatContext *fc, AVStream *st, int stream_type
                 mpegts_find_stream_type(st, st->codecpar->codec_tag, METADATA_types);
         }
         break;
+    case 0x5f: /* AV1 descriptor */
+        if (!st->codecpar->extradata) {
+            st->codecpar->extradata = av_mallocz(4 + AV_INPUT_BUFFER_PADDING_SIZE);
+            if (!st->codecpar->extradata)
+                return AVERROR(ENOMEM);
+
+            /* private_data_specifier */
+            get16(pp, desc_end);
+            get16(pp, desc_end);
+            st->codecpar->extradata[0] = get8(pp, desc_end);
+            st->codecpar->extradata[1] = get8(pp, desc_end);
+            st->codecpar->extradata[2] = get8(pp, desc_end);
+            st->codecpar->extradata[3] = get8(pp, desc_end) & 0x3f;
+            st->codecpar->extradata_size = 4;
+            sti->need_context_update = 1;
+        }
+        break;
     case 0x7f: /* DVB extension descriptor */
         ext_desc_tag = get8(pp, desc_end);
         if (ext_desc_tag < 0)
